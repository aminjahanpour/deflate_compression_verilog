import read_huffman_codes
import copy


def decode_next(encoded, codes):
    """
    this function gives you the next symbol and the number of bits used to decode it
    """

    min_code_len = min([len(x) for x in codes.values()])
    max_code_len = max([len(x) for x in codes.values()])

    for search_len in range(min_code_len, max_code_len + 1):
        for symbol, code in codes.items():

            if encoded[:search_len] == code:
                return symbol, len(code)

    assert False, 'can not find a match in the keys. was not able to decode'




def print_symbols_and_offset_bits():
    with open("C:\\Users\\jahan\\Desktop\\verilog\\deflate\\encoder_workstation\\initially_coded_cl_ll.txt", 'r') as my_file:
        clcoding_output_ll = my_file.read().split('\n')[:-1]

    with open("C:\\Users\\jahan\\Desktop\\verilog\\deflate\\encoder_workstation\\initially_coded_cl_distance.txt", 'r') as my_file:
        clcoding_output_distance = my_file.read().split('\n')[:-1]

    print('\n\n\n\n')

    clcoding_output = []

    for el in clcoding_output_ll:
        clcoding_output.append(int(el[-(int(el[:5],2)):],2))

    print('-----------------------')

    for el in clcoding_output_distance:
        clcoding_output.append(int(el[-(int(el[:5],2)):],2))

    for el in clcoding_output:
        print(el)


    print(f'total: {len(clcoding_output)}')





    with open("C:\\Users\\jahan\\Desktop\\verilog\\deflate\\encoder_workstation\\fully_coded_cl_pre_bitstream_ll.txt", 'r') as my_file:
        recode_output_ll = my_file.read().split('\n')[:-1]

    with open("C:\\Users\\jahan\\Desktop\\verilog\\deflate\\encoder_workstation\\fully_coded_cl_pre_bitstream_distance.txt", 'r') as my_file:
        recode_output_distance = my_file.read().split('\n')[:-1]

    cl_codes_ll = read_huffman_codes.verify_verilog_huffman_codes('cl_ll', 1)
    cl_codes_distance = read_huffman_codes.verify_verilog_huffman_codes('cl_distance', 1)


    previous_v=0

    recoded_output_values_ll = []
    for el in recode_output_ll:
        v = el[-(int(el[:5],2)):]

        if previous_v not in [16,17,18]:
            decoded_v = int(decode_next(v, cl_codes_ll)[0],2)
            recoded_output_values_ll.append(decoded_v)
            previous_v = copy.deepcopy(decoded_v)
        else:
            previous_v = 0
            recoded_output_values_ll.append(int(v,2))



    previous_v=0

    recoded_output_values_distance = []
    for el in recode_output_distance:
        v = el[-(int(el[:5],2)):]

        if previous_v not in [16,17,18]:
            decoded_v = int(decode_next(v, cl_codes_distance)[0],2)
            recoded_output_values_distance.append(decoded_v)
            previous_v = copy.deepcopy(decoded_v)
        else:
            previous_v = 0
            recoded_output_values_distance.append(int(v,2))


    recoded_output_full = copy.deepcopy(recoded_output_values_ll)
    for el in recoded_output_values_distance:
        recoded_output_full.append(el)

    assert recoded_output_full == clcoding_output

    print("`recoded` output match cl values generated by `clcoding`")
    df=4



def print_symbols_only():
    with open("C:\\Users\\jahan\\Desktop\\verilog\\deflate\\encoder_workstation\\symbols_cl_ll.txt", 'r') as my_file2:
        data2_ll = my_file2.read().split('\n')[:-1]

    with open("C:\\Users\\jahan\\Desktop\\verilog\\deflate\\encoder_workstation\\symbols_cl_distance.txt", 'r') as my_file3:
        data2_distance = my_file3.read().split('\n')[:-1]

    data2 = []
    for x in data2_ll:
        data2.append(x)
    for x in data2_distance:
        data2.append(x)


    dd = 0
    for idx, el in enumerate(data2_ll):
        print(f'({idx})          {int(el, 2)}')
        dd = idx + 1
    print('----------------------------------')

    for idx, el in enumerate(data2_distance):
        print(f'({dd + idx})          {int(el, 2)}')

    print(f'total: {len(data2)}')


if __name__ == '__main__':
    # print_symbols_only()
    print_symbols_and_offset_bits()


"""

    8 bits for: hlit_cl
    3 bits per el for el in ll_cl_cl_table
    8 bits for: hdist_cl
    3 bits per el for el in dd_cl_cl_table

    8 bits for: hlit
    8 bits for: hdist

    10 bits for: bit length of ll_cl_fully_encoded
    var bits for: ll_cl_fully_encoded

    10 bits for:  bit length of dd_cl_fully_encoded
    var bits for: dd_cl_fully_encoded
    
    
{
	"lzss_outputs_count": 49,
	"hlit": 25,
	"cl_codings_pre_bitstream_words_count_ll": 60,
	"hlit_cl": 5,
	"count_of_pre_bitstream_for_reordered_cl_cl_values_ll": 14,
	"recode_cl_total_bits_to_write_ll": 175,
	"hdist": 20,
	"cl_codings_pre_bitstream_words_count_distance": 10,
	"hdist_cl": 3,
	"count_of_pre_bitstream_for_reordered_cl_cl_values_distance": 16,
	"recode_cl_total_bits_to_write_distance": 16
}


codes = {
'000000000' 0 : '10',
'000000011' 3 : '0010',
'000000100' 4 : '0011',
'000000101' 5 : '010',
'000000110' 6 : '11',
'000010000' 16: '0000',
'000010001' 17: '011',
'000010010' 18: '0001',
}
"""


"""
18
21
4
5
16
1
17
0
5
18
5
5
0
5
0
0
6
3
0
6
6
17
3
6
5
17
0
6
0
0
4
6
17
0
6
17
2
6
4
0
6
17
4
6
17
1
6
6
0
0
6
17
1
6
18
126
3
0
0
5
0
0
3
0
3
3
0
3
2
2
total: 70
all good
all good
`recoded` output match cl values generated by `clcoding`

"""